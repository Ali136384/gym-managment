// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id Int @id @default(autoincrement())
  
  email String @unique
  name String?
  password String
  session String @unique @default(uuid())
  lastLogin DateTime?
  permission Int

  age Int
  gender String
  salary Int
  startDate DateTime @default(now())

  gymName String @default("Gym")

  comments SubscriberComment[]
  eventsSeen SeenEvent[]
  messageRead MessageRead[]
  logs Event[]

  deletedAt DateTime?
}

model Subscriber {
  id Int @id @default(autoincrement())

  name String
  surname String
  age Int
  gender String
  duration Int?
  daysLeft Int?
  bucketPrice Decimal
  paymentAmount Decimal
  startedAt DateTime
  endsAt DateTime

  comments SubscriberComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  deletedAt DateTime?
}

model MessageRead {
  id Int @id @default(autoincrement())

  read Boolean @default(false)

  user User @relation(fields: [userId], references: [id])
  userId Int

  message Message @relation(fields: [messageId], references: [id])
  messageId Int

  @@index([userId, messageId])
}

model Message {
  id Int @id @default(autoincrement())

  text String
  readStatus MessageRead[]

  sent DateTime @default(now())
}

model Event {
  id Int @id @default(autoincrement())

  event String
  target String
  actor User @relation(fields: [actorId], references: [id])
  seens SeenEvent[]
  actorId Int

  targetId Int?

  date DateTime @default(now())
}

model SeenEvent {
  id Int @id @default(autoincrement())

  eventId Int
  userId Int

  event Event @relation(fields: [eventId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model PlanFeature {
  id Int @id @default(autoincrement())

  name String
  plan Plan @relation(fields: [planId], references: [id])
  planId Int

  @@index([name, planId])
}

model Plan {
  id Int @id @default(autoincrement())

  title String @unique
  description String
  price Decimal
  duration String
  features PlanFeature[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model ProductCategory {
  id Int @id @default(autoincrement())

  name String @unique

  products Product[]
}

model Product {
  id Int @id @default(autoincrement())

  name String
  description String
  price Decimal
  marka String

  category ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?
}

model ExcerciseCategory {
  id Int @id @default(autoincrement())

  name String @unique

  excercises Excercise[]
}

model Excercise {
  id Int @id @default(autoincrement())

  name String @unique
  description String

  category ExcerciseCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Trainer {
  id Int @id @default(autoincrement())

  job String @default("")
  name String
  description String

  instagram String
  facebook String
  twitter String
}

model SubscriberComment {
  id Int @id @default(autoincrement())

  text String @default("")

  senderId Int
  subscriberId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  deletedAt DateTime?

  sender User @relation(fields: [senderId], references: [id])
  subscriber Subscriber @relation(fields: [subscriberId], references: [id])
}